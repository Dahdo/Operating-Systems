1. Describe different approaches to the implementation of a network server applicationable to process requests placed by multiple clients simultaneously (10 pts):

- Blocking I/O operations: by use of thread and sub processes. and use functions like recv, recvfrom, write, send, read, sendto in blocking mode.
with thread, it is light, no overhead of IPC and memory sharing but the crash of one thread might lead to the crush of the whole system. Synchronization needed as well.
with sub processes, proc creation overhead, IPC and the crash of one sub process doesn't necessarily lead to the crash of the whole system.

- Synchronous I/O multiplexing: the switching of single thread between different descriptors which are ready to perform the intended operations. the methods like select, pselect, poll, epoll are used.


2. What is a page table and what is it used for by the computer system? Where is it stored? Describe two possible internal structures it may have:

The page table is a data structure used by MMU (momory management unit) to translate virtual addresses used by the process (generated by the cpu) to physical addresses used by the momory.
A process owns each page table and it is stored in the RAM and maintained by the OS.
the internal structure: hierarchical paging, inverted paging [description later]



3. Describe 3 different filesystem block allocation methods: contigous, linked and indexed. Elaborate on advantages and disadvantages of each.
- contigous allocation: the file is allocated the contigous block of disk space. + fast access, + simple implementation. - external fragmentation, - need for compaction online or offline, - having to know the file size.

- Linked allocation: the file is allocated the blocks of disk space where one block contains a pointer to the next block.
+ no external fragementation, + scalability, - no random access, -overhead of managing pointers.

- Indexed allocation: here, the additional block of indices is allocated to the file. It contains address to the blocks of disk space used by the file.

+ random access, + no external fragementation, + efficient for large files. - overhead for managing index block, - limited index block, - overhead for small files.
